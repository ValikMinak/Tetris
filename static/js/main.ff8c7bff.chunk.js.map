{"version":3,"sources":["Images/bg.png","img/bg.png","gameHelpers.js","tetrominos.js","Components/Styles/StyledCell.js","Components/Cell.js","Components/Styles/StyledStage.js","Components/Stage.js","Components/Styles/StyledDisplay.js","Components/Display.js","Components/StartButton.js","Hooks/useStage.js","Components/Styles/StyledTetrisWrapper.js","Components/Styles/StyledTetris.js","Components/Tetris.js","Hooks/usePlayer.js","Hooks/useGameStatus.js","Hooks/useInterval.js","App.js","index.js"],"names":["module","exports","createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","StyledCell","styled","div","props","type","React","memo","console","log","StyledStage","height","width","Stage","map","row","cell","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledTetrisWrapper","bgImage","StyledTetris","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","mtrx","_","index","column","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","move","keyCode","role","tabIndex","onKeyDown","e","onKeyUp","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ff8c7bff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";","module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";","export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = () =>\n  Array.from(Array(STAGE_HEIGHT), () => Array(STAGE_WIDTH).fill([0, 'clear']));\n\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\n  // THIS IS SLOWER!!!\n  // return player.tetromino.some((row, y) =>\n  //   row.some((cell, x) => {\n  //     if (cell !== 0) {\n  //       return (\n  //         !stage[y + player.pos.y + moveY] ||\n  //         !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n  //         stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\n  //           'clear'\n  //       );\n  //     }\n  //     return false;\n  //   })\n  // );\n\n  // Using for loops to be able to return (and break). Not possible with forEach\n  for (let y = 0; y < player.tetromino.length; y += 1) {\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\n      // 1. Check that we're on an actual Tetromino cell\n      if (player.tetromino[y][x] !== 0) {\n        if (\n          // 2. Check that our move is inside the game areas height (y)\n          // That we're not go through bottom of the play area\n          !stage[y + player.pos.y + moveY] ||\n          // 3. Check that our move is inside the game areas width (x)\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n          // 4. Check that the cell wer'e moving to isn't set to clear\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\n            'clear'\n        ) {\n          return true;\n        }\n      }\n    }\n  }\n  // 5. If everything above is false\n  return false;\n};\n","export const TETROMINOS = {\n  0: { shape: [[0]], color: '0, 0, 0' },\n  I: {\n    shape: [[0, 'I', 0, 0], [0, 'I', 0, 0], [0, 'I', 0, 0], [0, 'I', 0, 0]],\n    color: '80, 227, 230',\n  },\n  J: { shape: [[0, 'J', 0], [0, 'J', 0], ['J', 'J', 0]], color: '36, 95, 223' },\n  L: {\n    shape: [[0, 'L', 0], [0, 'L', 0], [0, 'L', 'L']],\n    color: '223, 173, 36',\n  },\n  O: { shape: [['O', 'O'], ['O', 'O']], color: '223, 217, 36' },\n  S: { shape: [[0, 'S', 'S'], ['S', 'S', 0], [0, 0, 0]], color: '48, 211, 56' },\n  T: {\n    shape: [[0, 0, 0], ['T', 'T', 'T'], [0, 'T', 0]],\n    color: '132, 61, 198',\n  },\n  Z: { shape: [['Z', 'Z', 0], [0, 'Z', 'Z'], [0, 0, 0]], color: '227, 78, 78' },\n};\n\nexport const randomTetromino = () => {\n  const tetrominos = 'IJLOSTZ';\n  const randTetromino =\n    tetrominos[Math.floor(Math.random() * tetrominos.length)];\n  return TETROMINOS[randTetromino];\n};\n","import styled from 'styled-components';\n\nexport const StyledCell = styled.div`\n  width: auto;\n  /* border-radius: 5px; */\n  background: rgba(${props => props.color}, 0.8);\n  border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\n  border-bottom-color: rgba(${props => props.color}, 0.1);\n  border-right-color: rgba(${props => props.color}, 1);\n  border-top-color: rgba(${props => props.color}, 1);\n  border-left-color: rgba(${props => props.color}, 0.3);\n`;\n","import React from 'react';\nimport { TETROMINOS } from '../tetrominos';\nimport {StyledCell} from \"./Styles/StyledCell\";\n\n// React.memo makes sure we only re-render the changed cells\nconst Cell = ({ type }) => (\n  <StyledCell type={type} color={TETROMINOS[type].color}>\n    {console.log('rerender cell')}\n  </StyledCell>\n);\n\nexport default React.memo(Cell);\n","import styled from 'styled-components';\n\nexport const StyledStage = styled.div`\n  display: grid;\n  grid-template-rows: repeat(\n    ${props => props.height},\n    calc(25vw / ${props => props.width})\n  );\n  grid-template-columns: repeat(${props => props.width}, 1fr);\n  grid-gap: 1px;\n  border: 2px solid #333;\n  width: 100%;\n  max-width: 25vw;\n  background: #111;\n`;\n","import React from 'react';\n\nimport Cell from './Cell';\nimport {StyledStage} from \"./Styles/StyledStage\";\n\nconst Stage = ({ stage }) => (\n  <StyledStage width={stage[0].length} height={stage.length}>\n    {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\n  </StyledStage>\n);\n\nexport default Stage;\n","import styled from 'styled-components';\n\nexport const StyledDisplay = styled.div`\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  margin: 0 0 20px 0;\n  padding: 20px;\n  border: 4px solid #333;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  color: ${props => (props.gameOver ? 'red' : '#999')};\n  background: #000;\n  font-family: Pixel, Arial, Helvetica, sans-serif;\n  font-size: 0.8rem;\n`;\n","import React from 'react';\nimport {StyledDisplay} from \"./Styles/StyledDisplay\";\n\nconst Display = ({ gameOver, text }) => (\n  <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\n);\n\nexport default Display;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledStartButton = styled.button`\n  box-sizing: border-box;\n\n  margin: 0 0 20px 0;\n  padding: 20px;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  border: none;\n  color: white;\n  background: #333;\n  font-family: Pixel, Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n  outline: none;\n  cursor: pointer;\n`;\n\nconst StartButton = ({ callback }) => (\n  <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\n);\n\nexport default StartButton;\n","import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n\n  useEffect(() => {\n    setRowsCleared(0);\n    const sweepRows = newStage =>\n      newStage.reduce((ack, row) => {\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\n          setRowsCleared(prev => prev + 1);\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n          return ack;\n        }\n        ack.push(row);\n        return ack;\n      }, []);\n\n    const updateStage = prevStage => {\n      // First flush the stage\n      const newStage = prevStage.map(row =>\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\n      );\n\n      // Then draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              value,\n              `${player.collided ? 'merged' : 'clear'}`,\n            ];\n          }\n        });\n      });\n      // Then check if we got some score if collided\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n      return newStage;\n    };\n\n    // Here are the updates\n    setStage(prev => updateStage(prev));\n  }, [\n    player.collided,\n    player.pos.x,\n    player.pos.y,\n    player.tetromino,\n    resetPlayer,\n  ]);\n\n  return [stage, setStage, rowsCleared];\n};\n","import styled from 'styled-components'\r\nimport bgImage from '../../Images/bg.png'\r\n\r\n\r\n\r\nexport const StyledTetrisWrapper=styled.div`\r\nwidth:100vw;\r\nheight:100vh;\r\nbackground:url(${bgImage}) #000;\r\nbackground-size:cover;\r\noverflow:hidden;\r\n`\r\n\r\nexport const StyledTetris=styled.div`\r\ndisplay:flex;\r\nalign-items:flex-start;\r\npadding:40px;\r\nmargin:0 auto;\r\nmax-width:900px;\r\n\r\n    aside {\r\n    width:100%;\r\n    max-width:200px;\r\n    display:block;\r\n    padding:0 20px;\r\n    }\r\n`\r\n","import styled from 'styled-components';\n// BG Image\nimport bgImage from '../../img/bg.png';\n\nexport const StyledTetrisWrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background: url(${bgImage}) #000;\n  background-size: cover;\n  overflow: hidden;\n`;\n\nexport const StyledTetris = styled.div`\n  display: flex;\n  align-items: flex-start;\n  padding: 40px;\n  margin: 0 auto;\n  max-width: 900px;\n\n  aside {\n    width: 100%;\n    max-width: 200px;\n    display: block;\n    padding: 0 20px;\n  }\n`;\n","import React, { useState } from 'react';\n\nimport { createStage, checkCollision } from '../gameHelpers';\n\n// Custom Hooks\n\n\n// Components\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\nimport {usePlayer} from \"../Hooks/usePlayer\";\nimport {useGameStatus} from \"../Hooks/useGameStatus\";\nimport {useStage} from \"../Hooks/useStage\";\nimport {useInterval} from \"../Hooks/useInterval\";\nimport {StyledTetrisWrapper} from \"./Styles/StyledTetrisWrapper\";\nimport {StyledTetris} from \"./Styles/StyledTetris\";\n\nconst Tetris = () => {\n  const [dropTime, setDropTime] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\n    rowsCleared\n  );\n\n  console.log('re-render');\n\n  const movePlayer = dir => {\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\n      updatePlayerPos({ x: dir, y: 0 });\n    }\n  };\n\n  const keyUp = ({ keyCode }) => {\n    if (!gameOver) {\n      // Activate the interval again when user releases down arrow.\n      if (keyCode === 40) {\n        setDropTime(1000 / (level + 1));\n      }\n    }\n  };\n\n  const startGame = () => {\n    // Reset everything\n    setStage(createStage());\n    setDropTime(1000);\n    resetPlayer();\n    setScore(0);\n    setLevel(0);\n    setRows(0);\n    setGameOver(false);\n  };\n\n  const drop = () => {\n    // Increase level when player has cleared 10 rows\n    if (rows > (level + 1) * 10) {\n      setLevel(prev => prev + 1);\n      // Also increase speed\n      setDropTime(1000 / (level + 1) + 200);\n    }\n\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\n      updatePlayerPos({ x: 0, y: 1, collided: false });\n    } else {\n      // Game over!\n      if (player.pos.y < 1) {\n        console.log('GAME OVER!!!');\n        setGameOver(true);\n        setDropTime(null);\n      }\n      updatePlayerPos({ x: 0, y: 0, collided: true });\n    }\n  };\n\n  const dropPlayer = () => {\n    // We don't need to run the interval when we use the arrow down to\n    // move the tetromino downwards. So deactivate it for now.\n    setDropTime(null);\n    drop();\n  };\n\n  // This one starts the game\n  // Custom hook by Dan Abramov\n  useInterval(() => {\n    drop();\n  }, dropTime);\n\n  const move = ({ keyCode }) => {\n    if (!gameOver) {\n      if (keyCode === 37) {\n        movePlayer(-1);\n      } else if (keyCode === 39) {\n        movePlayer(1);\n      } else if (keyCode === 40) {\n        dropPlayer();\n      } else if (keyCode === 38) {\n        playerRotate(stage, 1);\n      }\n    }\n  };\n\n  return (\n    <StyledTetrisWrapper\n      role=\"button\"\n      tabIndex=\"0\"\n      onKeyDown={e => move(e)}\n      onKeyUp={keyUp}\n    >\n      <StyledTetris>\n        <Stage stage={stage} />\n        <aside>\n          {gameOver ? (\n            <Display gameOver={gameOver} text=\"Game Over\" />\n          ) : (\n            <div>\n              <Display text={`Score: ${score}`} />\n              <Display text={`rows: ${rows}`} />\n              <Display text={`Level: ${level}`} />\n            </div>\n          )}\n          <StartButton callback={startGame} />\n        </aside>\n      </StyledTetris>\n    </StyledTetrisWrapper>\n  );\n};\n\nexport default Tetris;\n","import { useState, useCallback } from 'react';\n\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\n\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: { x: 0, y: 0 },\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n  });\n\n  function rotate(matrix, dir) {\n    // Make the rows to become cols (transpose)\n    const mtrx = matrix.map((_, index) => matrix.map(column => column[index]));\n    // Reverse each row to get a rotaded matrix\n    if (dir > 0) return mtrx.map(row => row.reverse());\n    return mtrx.reverse();\n  }\n\n  function playerRotate(stage, dir) {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -dir);\n        clonedPlayer.pos.x = pos;\n        return;\n      }\n    }\n    setPlayer(clonedPlayer);\n  }\n\n  const updatePlayerPos = ({ x, y, collided }) => {\n    setPlayer(prev => ({\n      ...prev,\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\n      collided,\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n      tetromino: randomTetromino().shape,\n      collided: false,\n    });\n  }, []);\n\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};\n","import { useState, useEffect, useCallback } from 'react';\n\nexport const useGameStatus = rowsCleared => {\n  const [score, setScore] = useState(0);\n  const [rows, setRows] = useState(0);\n  const [level, setLevel] = useState(0);\n\n  const linePoints = [40, 100, 300, 1200];\n\n  const calcScore = useCallback(() => {\n    // We have score\n    if (rowsCleared > 0) {\n      // This is how original Tetris score is calculated\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n      setRows(prev => prev + rowsCleared);\n    }\n  }, [level, linePoints, rowsCleared]);\n\n  useEffect(() => {\n    calcScore();\n  }, [calcScore, rowsCleared, score]);\n\n  return [score, setScore, rows, setRows, level, setLevel];\n};\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport Tetris from \"./Components/Tetris\";\n\nconst App = () => (\n  <div className=\"App\">\n    <Tetris />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}